1.Vue instant

var name = new Vue({options}) 의 형태로 인스턴스를 생성한다
options 는  자바스크립트 객체 형태로 전달한다.
주요 property
{
    el:"#id",  => dom element의 아이디 or 클래스
    data : {}  => dom element에서 사용할 변수, 데이터
}

{{}} expression
html에서 자바스크립트 변수를 사용 가능함.
자바스크립트 연산 가능

2.Attribute Binding
Vue instant의 data를 html 요소의 속성값을 사용할 수 있음
attribute 앞에 v-bind: 를 붙이거나 짧게는 :를 붙이고 그 값으로 data object의 property를 넘겨주면 가능하다.
property로 'class'로 사용할 수 없음.

3.Conditional rendering
v-if,v-else-if,v-if 속성으로 Vue instance의 데이터에 따라 렌더링이 가능함
v-show 속성으로 visibility(style의 display 값(none or block))를 조절할 수 있음

4.list rendering
Vue data에 array 타입의 자료를 가지고 반복문을 사용할 수 있음
속성 이름 v-for ="data in array"

5.Event handling, Method
v-on:Event || @Event 의 형태로 이벤트 리스터 추가 가능
이벤트 리스너로는 인스턴스의 메소드를 추가할 수 있고, 함수를 직접 작성할 수 도 있다.
this. 으로 해당 인스턴스의 데이터에 접근할 수 있다.

6.Class ans Style Binding

style binding :
1) 값 자체를 바인딩 할 수 있음
2) 객체를 스타일 속성으로 바인딩 할 수 있음
3) 여러 객체를 배열로 같이 바인딩 할 수 있음

Class binding : 
1) 조건에 따라 class를 바인딩 하거나 뺴기

Computed property :
1) data property로 재구성한 값을 사용할 수 있다.

Component :
1) 요소를 컴포넌트로 만들어서 재활용할 수 있다.
2) 부모 컴포넌트 안에 여러 컴포넌트를 포함할 수 있다. 이때 부모의 속성을 props 로 전달할 수 있다. 태그를 선언할 때 attr 형태로 전달하면 
부모의 data,computed data(method), 도 전달하면 컴포넌트 template에서 바로 사용할 수 있다.

Communicating Events : 
1) this.$emit('Event's name',args,...) 로 이벤트를 trigger 할 수 있다.
2) 해당 이벤트 핸들러로 부모의 함수를 추가해서 사용하면 Global 한 변수를 처리 할 수 있다.